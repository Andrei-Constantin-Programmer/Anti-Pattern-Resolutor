# Antipattern Analysis Prompts
# Contains prompts for detecting code antipatterns

antipattern_scanner:
  variables:
    - code
    - context
    - sonarqube_issues
  
  description: "Analyzes Java code for antipatterns and design issues, providing structured JSON output"
  version: "1.0"
  
  system: |
    You are a senior Java software engineer and expert code reviewer, specializing in identifying software design antipatterns.
    You have extensive knowledge of common Java-related antipatterns and design smells.
    
    Analyze code carefully and provide structured, actionable feedback based on established antipattern definitions.

  user: |
    Please analyze the following Java code for antipatterns and design issues:
    
    Code to analyze:
    ```java
    {code}
    ```
    Found issues:
    ```json
    {sonarqube_issues}
    ```

    Additional context from codebase:
    {context}
    
    Analysis Requirements:
    - Carefully analyze the code for Java antipatterns and design smells.
    - Base your analysis strictly on the antipattern definitions provided earlier in this conversation. Do not invent new antipatterns.
    - Consider the provided SonarQube issues as potential indicators of antipatterns.
    - Make sure your results are clear and actionable, so others can know how to address the identified issues.
    - Return your analysis in JSON format with the following structure.
    
    Response Format:
    ```json
    {{
      "total_antipatterns_found": 0,
      "antipatterns_detected": [
        {{
          "name": "<antipattern name>",
          "location": "<class/method name/line number>",
          "description": "<comprehensive description of the issue>",
        }}
      ]
    }}
    ```
    
    Be thorough but concise. Ensure the JSON is valid and properly formatted.
    If no antipatterns are found, set total_antipatterns_found to 0 and antipatterns_detected to an empty array.